/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ElectronicaWebDAW.modeloDAO;

import ElectronicaWebDAW.Entidades.Usuario;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.naming.Context;
import javax.naming.InitialContext;
import javax.naming.NamingException;
import javax.sql.DataSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

/**
 *
 * @author Drebin
 */
@Repository("UsuarioJDBC")
public class UsuarioDAOJDBC implements UsuarioDAO{
    
   
    private static final String connPoolName="java:comp/env/BaseDatos"; // java:comp/env/(Nombre base de datos)
    private static final String[] autoField={"id"}; //Autogenerated field for new records
    
    @Autowired
    private DataSource ds=null;
    
    //------Sentencias SQL-----
    private static final String SQL_BUSCAID="SELECT * FROM Usuarios where ID=?";
    private static final String SQL_BUSCA_USER_NOMBRE="SELECT * FROM Usuarios where NOMBRE_USUARIO=?";
    private static final String SQL_ACTUALIZA="UPDATE Usuarios set CORREO=?, PUNTOS=?, CONECTADO=?,PASSWORD=? where id=?";
    private static final String SQL_BORRA_ID="DELETE FROM Usuarios WHERE ID=?";
    private static final String SQL_BORRA_NOMBRE="DELETE FROM Usuarios WHERE NOMBRE_USUARIO=?";
    private static final String SQL_BUSCATODOS="SELECT * FROM Usuarios";
    private static final String SQL_INSERTAR="INSERT INTO Usuarios (NOMBRE,NOMBRE_USUARIO,CORREO,PUNTOS,CONECTADO,PASSWORD) values (?,?,?,?,?,?)";
    private static final String SQL_BUSCA_CONECTADOS="SELECT * FROM Usuarios where CONECTADO=true";
    private static final String SQL_INSERTAR_ROLES="INSERT INTO Roles(NOMBRE_USUARIO,ROL) values (?,'Usuario')";
    private static final String SQL_BORRAR_ROLES="DELETE FROM Roles WHERE NOMBRE_USUARIO=?";
    
    public UsuarioDAOJDBC(){
       
//         if (ds==null) {
//            try {
//                Context context = new InitialContext();
//                ds = (DataSource) context.lookup(connPoolName);
//                
//            } catch (NamingException ex) {
//                Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
//            }
//        }    
    }
    
    
   
    /*
        Hacer un mapping consisten en trasnformar las entidades que gestiona la BD a objetos del
        modelo de datos con el que estamos trabajando   
    */
    private static Usuario clienteMapper(ResultSet rs) throws SQLException {
       
        Usuario user=new Usuario(   rs.getInt("ID"),
                                    rs.getString("NOMBRE"),
                                    rs.getString("CORREO"),
                                    rs.getInt("PUNTOS"),
                                    rs.getString("PASSWORD"),
                                    rs.getBoolean("CONECTADO"),
                                    rs.getString("NOMBRE_USUARIO"));
       
        return user;
    }  
    
    
    @Override
    public Usuario busca(Integer id) {
        Usuario user=null;
        try (Connection conn=ds.getConnection();
                
             PreparedStatement stmn=conn.prepareStatement(SQL_BUSCAID)) {
            stmn.setInt(1,id);
            
            try( ResultSet rs=stmn.executeQuery()) {
                //Como la consulta se genera antes de la primera linea, para obtener la buscada
                //se tiene que avanzar al siguiente
                rs.next();
                user=clienteMapper(rs);                
            }
        } catch (SQLException ex) {
            Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
       
        return user;    
    
    }

    @Override
    public ArrayList<Usuario> buscaTodos() {
        ArrayList<Usuario> l=new ArrayList<>();
        
        try (Connection conn=ds.getConnection();
            Statement stmn=conn.createStatement();
            ResultSet rs=stmn.executeQuery(SQL_BUSCATODOS);
        ){
            /*Va guardando todas las ocurrencias en la lista*/
            while (rs.next()) {
                l.add(clienteMapper(rs));
            }                
        } catch (Exception ex) {
            Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return l;    
    
    }

    
    
    public Usuario buscaNombre(String nombre){
        
        Usuario user=null;
        
        try (Connection conn=ds.getConnection();
             PreparedStatement stmn=conn.prepareStatement(SQL_BUSCA_USER_NOMBRE)) {
             stmn.setString(1,nombre);
            
            try( ResultSet rs=stmn.executeQuery()) {
                //Como la consulta se genera antes de la primera linea, para obtener la buscada
                //se tiene que avanzar al siguiente
                rs.next();
                user=clienteMapper(rs);                
            }
        } catch (SQLException ex) {
            Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
       
        return user;   
        
        
    }
    
    
    @Override
    public boolean actualizar(Usuario user) {
   
        boolean result=false;
        try (Connection conn=ds.getConnection();
            PreparedStatement stmn=conn.prepareStatement(SQL_ACTUALIZA);
        ){
            stmn.setString(1,user.getCorreoElectronico());
            stmn.setInt(2,user.getPuntos());
            stmn.setBoolean(3, user.isConectado());
            stmn.setString(4, user.getPassword());
            stmn.setInt(5, user.getId());
            
            //Si ha sido modificada la fila, se considera exito
            result=(stmn.executeUpdate()==1);
            
        } catch (Exception ex) {
            Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        
        return result;
    
    
    }

    @Override
    public boolean borra(Integer id) {
        boolean result=false;
        try (Connection conn=ds.getConnection();
            PreparedStatement stmn=conn.prepareStatement(SQL_BORRA_ID);
        ){
            stmn.setInt(1,id);
            result=(stmn.executeUpdate()==1);
        } catch (Exception ex) {
            Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }         
        return result;
    
    }
    
    private boolean insertarRol(String nombreUsuario){
        boolean result=false;
        try (Connection conn=ds.getConnection();
            PreparedStatement stmn=conn.prepareStatement(SQL_INSERTAR_ROLES);
        ){
            stmn.setString(1,nombreUsuario);
            //Si ha sido modificada la fila, se considera exito
            result=(stmn.executeUpdate()==1);
            
        } catch (Exception ex) {
            Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        
        return result;
    }
    
    private boolean borrrarRol(String nombreUsuario){
         boolean result=false;
        try (Connection conn=ds.getConnection();
            PreparedStatement stmn=conn.prepareStatement(SQL_BORRAR_ROLES);
        ){
            stmn.setString(1,nombreUsuario);
            //Si ha sido modificada la fila, se considera exito
            result=(stmn.executeUpdate()==1);
            
        } catch (Exception ex) {
            Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        
        return result;
    
    }
    
    
    
    @Override
    public boolean insertar(Usuario user){
        
        boolean result=false;
        try (Connection conn=ds.getConnection();
            PreparedStatement stmn=conn.prepareStatement(SQL_INSERTAR,autoField);
        ){           
            
            stmn.setString(1,user.getNombre());
            stmn.setString(2,user.getNombre_usuario());
            stmn.setString(3,user.getCorreoElectronico());
            stmn.setInt(4, user.getPuntos());
            stmn.setBoolean(5,user.isConectado());
            stmn.setString(6, user.getPassword());
            result=(stmn.executeUpdate()==1);
            
            try(ResultSet rs=stmn.getGeneratedKeys()){
                if (rs!=null && rs.next()) {
                    int nuevoId=rs.getInt(1); 
                    user.setId(nuevoId);                    
                }
            }catch(Exception ex){
                Logger.getLogger(ArticuloDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            }
             
          
        } catch (Exception ex) {
            Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
                
        return result && this.insertarRol(user.getNombre_usuario());
    }
    
    public ArrayList<Usuario> usuariosConectados(){
        
        ArrayList<Usuario> l=new ArrayList<>();
        
        try (Connection conn=ds.getConnection();
            Statement stmn=conn.createStatement();
            ResultSet rs=stmn.executeQuery(SQL_BUSCA_CONECTADOS);
        ){
            /*Va guardando todas las ocurrencias en la lista*/
            while (rs.next()) {
                l.add(clienteMapper(rs));
            }                
        } catch (Exception ex) {
            Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
        return l;    
        
    }
    /*
        Dado un nombre de usuario(clave), lo elimina
        de la BD.
        Ojo, no es el nombre comun, tiene que ser Nombre_Usuario, ya que
        actua de clave
    
    */
    public boolean borrarNombre(String nombre){
       
        boolean result=false;
        try (Connection conn=ds.getConnection();
            PreparedStatement stmn=conn.prepareStatement(SQL_BORRA_NOMBRE);
        ){
            stmn.setString(1,nombre);
            result=(stmn.executeUpdate()==1);
        } catch (Exception ex) {
            Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
            System.out.println(ex.getMessage());
        }         
        return result && this.borrrarRol(nombre);
    }
  
    
}
