/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ElectronicaWebDAW.modeloDAO;

import ElectronicaWebDAW.Entidades.Carrito;
import ElectronicaWebDAW.Entidades.Usuario;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.sql.DataSource;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

/**
 *
 * @author Drebin
 */

@Repository("CarritoJDBC")
public class CarritoDAOJDBC implements CarritoDAO{
    
    
    private static final String connPoolName="java:comp/env/BaseDatos"; // java:comp/env/(Nombre base de datos)
    private static final String[] autoField={"id"}; //Autogenerated field for new records
    
    private static final String SQL_INSERTAR="INSERT INTO Carrito (ID_ARTICULO,NOMBRE_USUARIO,FECHA) values(?,?,CURRENT_DATE)";
    private static final String SQL_BUSQUEDA_ARTICULOS_COMPRADOS="SELECT * FROM Carrito WHERE NOMBRE_USUARIO=?";
    private static final String SQL_BORRA_ID="DELETE FROM Carrito where ID=?";
    private static final String SQL_BORRA_PRODUCTO="DELETE FROM Carrito WHERE NOMBRE_USUARIO=? AND ID_ARTICULO=? AND ID=(SELECT MIN(ID) FROM Carrito WHERE NOMBRE_USUARIO=? AND ID_ARTICULO=?)";
    
    @Autowired
    private DataSource ds=null;
    
    public CarritoDAOJDBC(){}

     private static Carrito clienteMapper(ResultSet rs) throws SQLException {
       
        Carrito carrito=new Carrito(   rs.getInt("ID"),
                                    rs.getInt("ID_ARTICULO"),
                                    rs.getString("NOMBRE_USUARIO"),   
                                    rs.getString("FECHA"));
         
        return carrito;
    }  
    
    
    @Override
    public Carrito busca(Integer id) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public ArrayList<Carrito> buscaTodos() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean insertar(Carrito c) {
          boolean result=false;
        try (Connection conn=ds.getConnection();
            PreparedStatement stmn=conn.prepareStatement(SQL_INSERTAR,autoField);
        ){           
            
            stmn.setInt(1,c.getId_articulo());
            stmn.setString(2,c.getNombre_usuario());           
           
            result=(stmn.executeUpdate()==1);
            
            try(ResultSet rs=stmn.getGeneratedKeys()){
                if (rs!=null && rs.next()) {
                    int nuevoId=rs.getInt(1); 
                    c.setId(nuevoId);                    
                }
            }catch(Exception ex){
                Logger.getLogger(ArticuloDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
                System.out.println(ex.getMessage());
            }
             
          
        } catch (Exception ex) {
            Logger.getLogger(UsuarioDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
             System.out.println(ex.getMessage());
        }
        return result;
    }

    @Override
    public boolean actualizar(Carrito c) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean borra(Integer id) {

        boolean result=false;
        try (Connection conn=ds.getConnection();
            PreparedStatement stmn=conn.prepareStatement(SQL_BORRA_ID);
        ){
            stmn.setInt(1,id);
            result=(stmn.executeUpdate()==1);
        } catch (Exception ex) {
            Logger.getLogger(ArticuloDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }         
        return result;    
    }
    
    /*
        Dado un usuario, devuelve los elementos comprados
    */
    public ArrayList<Carrito> elementosComprados(Usuario user){
        
        ArrayList<Carrito> listaArticulos=new ArrayList<>();
        
        try (Connection conn=ds.getConnection();

        PreparedStatement stmn=conn.prepareStatement(SQL_BUSQUEDA_ARTICULOS_COMPRADOS)) {
        stmn.setString(1,user.getNombre_usuario());

        try( ResultSet rs=stmn.executeQuery()) {
            while(rs.next()){
                listaArticulos.add(clienteMapper(rs));
           }

            }catch(SQLException ex){                
                 Logger.getLogger(ArticuloDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);

            }
        } catch (SQLException ex) {             
            Logger.getLogger(ArticuloDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }
         
        return listaArticulos;
    }
    
    public boolean borraProducto(int id_Producto,Usuario user){
        
         boolean result=false;
        try (Connection conn=ds.getConnection();
            PreparedStatement stmn=conn.prepareStatement(SQL_BORRA_PRODUCTO);
        ){
            stmn.setString(1,user.getNombre_usuario());
            stmn.setInt(2,id_Producto);
            stmn.setString(3,user.getNombre_usuario());
            stmn.setInt(4,id_Producto);
            result=(stmn.executeUpdate()==1);
        } catch (Exception ex) {
            Logger.getLogger(ArticuloDAOJDBC.class.getName()).log(Level.SEVERE, ex.getMessage(), ex);
        }         
        return result;    
    }
    
}
